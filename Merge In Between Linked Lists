class Solution {
    public ListNode mergeInBetween(ListNode list1, int a, int b, ListNode list2) {
        // Initial pointers to help with node traversal.
        ListNode beforeA = list1; // Pointer to the node just before position 'a'.
        ListNode afterB = list1; // Pointer to the node just after position 'b'.

        // Move the 'beforeA' pointer to the node just before the 'a' position.
        for (int i = 0; i < a - 1; i++) {
            beforeA = beforeA.next;
        }
      
        // Move the 'afterB' pointer to the node just after the 'b' position.
        for (int i = 0; i < b; i++) {
            afterB = afterB.next;
        }

        // Connect the 'beforeA' node to the start of list2.
        beforeA.next = list2;

        // Traverse list2 to the end.
        ListNode endOfList2 = beforeA.next; // Start from the first node of list2
        while (endOfList2.next != null) {
            endOfList2 = endOfList2.next;
        }
      
        // Connect the end of list2 to the 'afterB' node, effectively skipping 'a' to 'b' in list1.
        endOfList2.next = afterB.next;

        // 'afterB.next' should be null to ensure we don't retain unwanted references.
        afterB.next = null;

        return list1; // Return the modified list1.
    }
}
